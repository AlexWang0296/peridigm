#! /usr/bin/env vtkpython

import vtkIO 

def IsInvalid(val):
    # other options exist to check for nan, but none is good
    # 1) use numpy.isnan() and numpy.isinf, which obviously requires numpy
    # 2) use math.isnan() and math.isinf(), which are available only in python versions >= 2.6
    if str(val) == str(1e400*0):
        return True
    return False

def GetDataTuples(goldData, data):

    numComponents = data.GetNumberOfComponents()
    goldDataTuple = None
    dataTuple = None
    if numComponents == 1:
        goldDataTuple = [goldData.GetTuple1(pt)]
        dataTuple = [data.GetTuple1(pt)]
    elif numComponents == 2:
        goldDataTuple = goldData.GetTuple2(pt)
        dataTuple = data.GetTuple2(pt)
    elif numComponents == 3:
        goldDataTuple = goldData.GetTuple3(pt)
        dataTuple = data.GetTuple3(pt)
    elif numComponents == 4:
        goldDataTuple = goldData.GetTuple4(pt)
        dataTuple = data.GetTuple4(pt)
    elif numComponents == 9:
        goldDataTuple = goldData.GetTuple9(pt)
        dataTuple = data.GetTuple9(pt)
    else:
        raise Exception("Invalid data dimension: " + str(numComponents))
        
    if goldDataTuple == None or dataTuple == None:
        raise Exception("Error processing " + dataName + ", invalid data")
            
    return (numComponents, goldDataTuple, dataTuple)


if __name__ == "__main__":

    print "\n----VTK File Comparison----"

    pvdGoldFileName = '/Users/djlittl/Peridigm/DEBUG/Compression_2x1x1_gold.pvd'
    pvtuGoldFileNames = None
    vtuGoldFileNames = None

    pvdFileName = '/Users/djlittl/Peridigm/DEBUG/Compression_2x1x1.pvd'
    pvtuFileNames = None
    vtuFileNames = None

    verbose = False
    filesDiff = False

    tolerances = {}
    tolerances['Points'] = 1.0e-12
    tolerances['Dilatation'] = 1.0e-12

    print "\nData set one: ", pvdGoldFileName
    print "Data set two: ", pvdFileName

#    if tolerance_specification == "Uniform":
#        # assign specifiec tolerance to every field
#        for item in vtu_data_1.point_data_names:
#            if item != "ID":
#                tolerances[item] = uniform_tolerance
#    else:
#        # read tolerances from file
#        parser = Tolerance_XML_Parser()
#        parser.Parse(tolerance_file)
#        tolerances = parser.tolerances
#    tolerance_keys = tolerances.keys()
#    tolerance_keys.sort()

    # print table of field names and tolerances
#    print "Data fields to be checked:"
#    print "  Data field               Tolerance"
#    for key in tolerance_keys:
#        text = "   " + key + " "*(25-len(key)) + str(tolerances[key])
#        print text
#    print

    # read the gold pvd file
    try:
        pvtuGoldFileNames = vtkIO.GetTimeCollection(pvdGoldFileName)
    except Exception, e:
        print "\nException thrown by vtkIO.GetTimeCollection():", e, "\n"
        exit(1)
    except:
        print "\nUnknown error generated by vtkIO.GetTimeCollection()\n"
        exit(1)

    # read the pvd file
    try:
        pvtuFileNames = vtkIO.GetTimeCollection(pvdFileName)
    except Exception, e:
        print "\nException thrown by vtkIO.GetTimeCollection():", e, "\n"
        exit(1)
    except:
        print "\nUnknown error generated by vtkIO.GetTimeCollection()\n"
        exit(1)

    # make sure the number of file names (timesteps) is the same
    if len(pvtuFileNames) != len(pvtuGoldFileNames):
        print "\nError, len(pvtuFileNames) != len(pvtuGoldFileNames).  Different numbers of time steps?\n"
        exit(1)

    # loop over the timesteps and compare requested data
    for timestep in range(len(pvtuFileNames)):

        verboseText = "\nTime step " + str(timestep)
        nonVerboseText = "\nTime step " + str(timestep)

        # read pvtu files and points data
        pvtuGoldFileName = pvtuGoldFileNames[timestep][1]
        vtuGoldData = vtkIO.GetGrid(pvtuGoldFileName)
        if vtuGoldData.GetPoints() == None:
            print "\nError reading", pvtuGoldFileName, "\n"
            exit(1)
        pvtuFileName = pvtuFileNames[timestep][1]
        vtuData = vtkIO.GetGrid(pvtuFileName)
        if vtuData.GetPoints() == None:
            print "\nError reading", pvtuFileName, "\n"
            exit(1)

        # compare data
        for dataName in tolerances.keys():
            
            # get the specified data for this time step
            # points data are handled in a unique way by VTK, so the are processed differently here
            goldData = None
            data = None
            if dataName == 'Points':
                goldData = vtkIO.GetPointTuples(vtuGoldData)
                data = vtkIO.GetPointTuples(vtuData)
            else:
                goldData = vtuGoldData.GetCellData().GetVectors(dataName)
                data = vtuData.GetCellData().GetVectors(dataName)

            # make sure data fields are the same length
            if data.GetNumberOfTuples() != goldData.GetNumberOfTuples():
                print "\nMismatched array sizes for \"", dataName, "\" field,", \
                    data.GetNumberOfTuples(), "!=", goldData.GetNumberOfTuples(), "\n"
                exit(1)

            # text specific to this data comparison
            compText =  "\n  Comparing " + dataName + "\n"
            compText += "    number of values: " + str(data.GetNumberOfTuples()) + '\n'
            compText += "    tolerance: " + str(tol) + '\n'

            # comparison tolerances, etc.
            tol = tolerances[dataName]
            maxDiff = 0.0
            dataDiff = False

            # loop over the points and perform comparison
            for pt in xrange(data.GetNumberOfTuples()):

                # determine the number of components and get the data
                try:
                    numComponents, goldDataTuple, dataTuple = GetDataTuples(goldData, data)
                except Exception, e:
                    print "\n", e, "\n"
                    exit(1)

                # compare each component of the data
                for i in range(numComponents):
                    diff = abs(goldDataTuple[i] - dataTuple[i])
                    if diff > maxDiff:
                        maxDiff = diff
                    if diff > tol or IsInvalid(goldDataTuple[i]) or IsInvalid(dataTuple[i]):
                        compText += "TOLERANCE EXCEEDED " # TODO GET GLOBAL IDS AND PRINT THEM
                        compText += str(goldDataTuple[i]) + " != " + str(dataTuple[i])
                        compText +=  ", difference = " + str(diff) + "\n"
                        dataDiff = True
                        filesDiff = True

            compText += "    maximum difference: " + str(maxDiff)
            verboseText += compText
            if dataDiff == True:
                nonVerboseText += compText

        if verbose == True:
            print verboseText
        if verbose == False and dataDiff == True:
            print nonVerboseText

    returnCode = 0
    if filesDiff == False:
        print "\nFILES MATCH\n"
    else:
        print "\nFILES DIFFER\n"
        returnCode = 1

    exit(returnCode)
